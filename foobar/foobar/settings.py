"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import django_stubs_ext
from dotenv import load_dotenv
import dj_database_url
from scheduler.types import QueueConfiguration


django_stubs_ext.monkeypatch()
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


def get_env_list(key: str) -> list[str]:
    return os.environ.get(key, "").split(",") if os.environ.get(key) else []


SECRET_KEY = os.environ.get("SECRET_KEY")


DEBUG = os.environ.get("DEBUG") == "True"

# Responses will only be sent to these hosts
# All other hosts will be rejected with a 400 Bad Request
ALLOWED_HOSTS = ["127.0.0.1", "localhost"] + get_env_list("ALLOWED_HOSTS")

# These origins will be allowed to make cross-site requests
# All other origins will be rejected with a 400 Bad Request
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
] + get_env_list("CORS_ALLOWED_ORIGINS")

# These origins will be trusted to make cross-site requests
# All other origins will be rejected with a 400 Bad Request
CSRF_TRUSTED_ORIGINS = get_env_list("CSRF_TRUSTED_ORIGINS")

# Application definition
INSTALLED_APPS: list[str] = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_guid",
    "rest_framework",
    "django_filters",
    "api",
    "drf_spectacular",
    "djoser",
    "corsheaders",
    "scheduler",
    "constance",
    "cachalot",
]

# We only use daphne in development
# Loading this in production just adds overhead to startup
if DEBUG:
    INSTALLED_APPS.insert(0, "daphne")

MIDDLEWARE = [
    "django_guid.middleware.guid_middleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"
ASGI_APPLICATION = "backend.asgi.application"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose_console": {
            # django-guid injects 'correlation_id' by default
            "format": "{levelname} {asctime} [{module}:{lineno}] [guid:{correlation_id}] {message}",
            "style": "{",
        },
        "simple_console": {
            "format": "{levelname} [guid:{correlation_id}] {message}",
            "style": "{",
        },
        "db_query_console": {
            # Django's DB logger provides 'duration' and 'sql' in the record
            "format": "{levelname} {asctime} [guid:{correlation_id}] {sql}",
            "style": "{",
        },
    },
    "filters": {
        "correlation_id_filter": {
            # This is provided by django-guid
            "()": "django_guid.log_filters.CorrelationId",
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",  # Show DEBUG and above for console
            "class": "logging.StreamHandler",
            "formatter": "verbose_console",  # Use the verbose formatter for most console output
            "filters": ["correlation_id_filter"],  # Add the correlation_id to all console logs
        },
        "console_db": {  # A dedicated console handler for DB queries if you want a specific format
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "db_query_console",  # Use the specialized db_query formatter
            "filters": ["correlation_id_filter"],
        },
    },
    "loggers": {
        "django_guid": {  # Logger for django-guid's own messages (like request received)
            "handlers": ["console"],
            "level": "WARNING",  # django-guid logs request/response at INFO
            "propagate": False,
        },
        "django.request": {  # For Django's 500 errors etc.
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,  # Don't let root handle it again if django_guid is also logging errors
        },
        "django.db.backends": {
            # Set level to DEBUG only when settings.DEBUG is True for DB queries
            # To see DB queries, DEBUG in settings.py must be True
            "handlers": ["console_db"] if DEBUG else [],  # Use the dedicated console_db handler
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        # Your application's loggers (e.g., 'your_app_name')
        # "your_app_name": {  # Replace 'your_app_name' with your actual app name(s)
        #     "handlers": ["console"],
        #     "level": "DEBUG",  # Or 'INFO' in production if console is too noisy
        #     "propagate": True,  # Let root logger also handle it if configured below
        # },
        # Root logger: catches everything not caught by more specific loggers if propagate is True
        "": {
            "handlers": ["console"],
            "level": "INFO",  # Default level for other logs (e.g., third-party libraries)
        },
    },
}
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {"default": dj_database_url.config(conn_max_age=600, ssl_require=False)}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ["REDIS_URL"],
    }
}
SCHEDULER_QUEUES: dict[str, QueueConfiguration] = {"default": QueueConfiguration(URL=os.environ["REDIS_URL"])}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"


STORAGES = {
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    },
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
}


AWS_STORAGE_BUCKET_NAME = os.environ["R2_BUCKET_NAME"]
AWS_S3_ACCESS_KEY_ID = os.environ["R2_KEY"]
AWS_S3_SECRET_ACCESS_KEY = os.environ["R2_SECRET"]
AWS_S3_CUSTOM_DOMAIN = os.environ.get("R2_DOMAIN_NAME", None)
AWS_S3_ENDPOINT_URL = os.environ["R2_ENDPOINT_URL"]
AWS_S3_URL_PROTOCOL = os.getenv("R2_URL_PROTOCOL", "https:")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework.authentication.TokenAuthentication",),
    # Disable HTML renderer
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

SPECTACULAR_SETTINGS = {"COMPONENT_SPLIT_REQUEST": True}
CONSTANCE_REDIS_CONNECTION = os.environ["REDIS_URL"]
CONSTANCE_CONFIG = {
    "THE_ANSWER": (
        42,
        "Answer to the Ultimate Question of Life, " "The Universe, and Everything",
    ),
}


if not DEBUG and os.environ.get("LOGFIRE_API_KEY"):
    import logfire

    logfire.configure(scrubbing=False, token=os.environ.get("LOGFIRE_API_KEY"))
    logfire.instrument_django()
    logfire.instrument_psycopg()
    logfire.instrument_redis()
    logfire.instrument_pydantic()
